---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 11/3/2024 7:47 AM
---

local Table = {}

for k, v in pairs(table) do if not Table[k] then Table[k] = v end end

function Table.keys(tbl, sorted, as_string)
    if not tbl then return {} end
    local key_set = {}
    local n = 0
    if as_string then -- checking as_string /before/ looping is faster
        for k, _ in pairs(tbl) do
            n = n + 1
            key_set[n] = tostring(k)
        end
    else
        for k, _ in pairs(tbl) do
            n = n + 1
            key_set[n] = k
        end
    end
    if sorted then
        table.sort(key_set, function(x, y) -- sorts tables with mixed index types.
            local tx = type(x) == 'number'
            local ty = type(y) == 'number'
            if tx == ty then
                return x < y and true or false -- similar type can be compared
            elseif tx == true then
                return true -- only x is a number and goes first
            else
                return false -- only y is a number and goes first
            end
        end)
    end
    return key_set
end

function Table.invert(tbl)
    local inverted = {}
    for k, v in pairs(tbl) do inverted[v] = k end
    return inverted
end

function Table.remove_keys(tbl, keys)
    for i = 1, #keys do tbl[keys[i]] = nil end
    return tbl
end

function Table.array_combine(...)
    local tables = { ... }
    local new = {}
    for _, tab in pairs(tables) do for _, v in pairs(tab) do table.insert(new, v) end end
    return new
end

function Table.unique_values(tbl)
    return Table.keys(Table.invert(tbl))
end

function Table.flatten(tbl)
    local flattened = {}
    for _, value in pairs(tbl) do
        if type(value) == 'table' then
            flattened = Table.array_combine(flattened, Table.flatten(value))
        else
            table.insert(flattened, value)
        end
    end
    return flattened
end

return Table