---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 8/10/2023 12:38 AM
---
require('util')
local AnimationDB = {}

---
--- @see https://github.com/heyqule/erm_zerg_hd_assets/blob/master/animation_db.lua for example
AnimationDB.data = {}

---
--- Construct basic layered animations
---
function AnimationDB.get_layered_animations(entity_type, name, animation_type, unit_scale)
    return {
        layers = {
            AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_shadow_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_team_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_glow_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_effect_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_light_mask_animation(entity_type, name, animation_type, unit_scale),
        }
    }
end

local subtypes = {
    main = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
    end,
    shadow = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_shadow_animation(entity_type, name, animation_type, unit_scale)
    end,
    glow = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_glow_animation(entity_type, name, animation_type, unit_scale)
    end,
    effect = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_effect_animation(entity_type, name, animation_type, unit_scale)
    end,
    light = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_light_mask_animation(entity_type, name, animation_type, unit_scale)
    end,
    team = function(entity_type, name, animation_type, unit_scale)
        return AnimationDB.get_team_mask_animation(entity_type, name, animation_type, unit_scale)
    end,
}
---
--- get single sprite animation from any subtypes
---
function AnimationDB.get_single_animation(entity_type, name, animation_type, subtype, unit_scale)
    subtype = subtype or 'main'
    if subtypes[subtype] then
        local animation = subtypes[subtype](entity_type, name, animation_type, unit_scale)
        return animation
    end

    return nil
end

function AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
    local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['main'])
    if unit_scale then
        animation.unit_scale = unit_scale
    end
    return animation
end

function AnimationDB.get_shadow_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['shadow'] then
        local animation = AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
        animation['draw_as_shadow'] = true
        animation['shift'] = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['shadow']['shift'])
        return animation
    end
end

---
--- Return glow mask
---
function AnimationDB.get_glow_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['glow'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['glow'])
        animation['draw_as_glow'] = true
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

---
--- Return effect mask
---
function AnimationDB.get_effect_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['effect'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['effect'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

---
--- Return draw_as_light mask
---
function AnimationDB.get_light_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['light'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['light'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        animation['draw_as_light'] = true
        return animation
    end
end

---
--- Return color mask for team colors
---
function AnimationDB.get_team_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['team'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['team'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

function AnimationDB.alter_team_color(animation_data, color, disable_mask, preserve_gloss)
    if animation_data['layers'] then
        for index, animation_node in pairs(animation_data['layers']) do
            if (animation_node.filename and string.find( animation_node.filename, '_teamcolour') ~= nil) or
                (animation_node.filenames and string.find( animation_node.filenames[1], '_teamcolour') ~= nil) or
                (animation_node.stripes and string.find( animation_node.stripes[1].filename, '_teamcolour') ~= nil) then
                if disable_mask then
                    animation_data['layers'][index] = nil
                else
                    animation_data['layers'][index]['tint'] = color
                    if preserve_gloss then
                        animation_data['layers'][index]['blend_mode'] = 'additive-soft'
                    end
                end
            end
        end
    end

    return animation_data
end

---
--- Toggle whether team color can be apply_runtime_time, only applicable to unit and turret. Does not work on Unit-spawner
---
function AnimationDB.apply_runtime_tint(animation_data, runtime_tint)
    if animation_data['layers'] then
        for index, animation_node in pairs(animation_data['layers']) do
            if (animation_node.filename and string.find( animation_node.filename, '_teamcolour') ~= nil) or
                (animation_node.filenames and string.find( animation_node.filenames[1], '_teamcolour') ~= nil) or
                (animation_node.stripes and string.find( animation_node.stripes[1].filename, '_teamcolour') ~= nil) then
            end
            if runtime_tint then
                animation_data['layers'][index]['apply_runtime_tint'] = true
            else
                animation_data['layers'][index]['apply_runtime_tint'] = false
            end
        end
    end
    return animation_data
end


function AnimationDB.change_animation_speed(animation_data, speed)
    if animation_data['layers'] then
        for index, _ in pairs(animation_data['layers']) do
            animation_data['layers'][index]['animation_speed'] = speed
        end
    elseif animation_data['animation_speed'] then
        animation_data['animation_speed'] = speed
    end

    return animation_data
end

return AnimationDB;